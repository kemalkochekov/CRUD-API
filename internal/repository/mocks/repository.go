// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source ./repository.go -destination=./mocks/repository.go -package=mock_repository
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	serviceEntities "CRUD_Go_Backend/internal/handlers/serviceEntities"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStudentPgRepo is a mock of StudentPgRepo interface.
type MockStudentPgRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStudentPgRepoMockRecorder
}

// MockStudentPgRepoMockRecorder is the mock recorder for MockStudentPgRepo.
type MockStudentPgRepoMockRecorder struct {
	mock *MockStudentPgRepo
}

// NewMockStudentPgRepo creates a new mock instance.
func NewMockStudentPgRepo(ctrl *gomock.Controller) *MockStudentPgRepo {
	mock := &MockStudentPgRepo{ctrl: ctrl}
	mock.recorder = &MockStudentPgRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentPgRepo) EXPECT() *MockStudentPgRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStudentPgRepo) Add(ctx context.Context, studentReq serviceEntities.StudentRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, studentReq)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStudentPgRepoMockRecorder) Add(ctx, studentReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStudentPgRepo)(nil).Add), ctx, studentReq)
}

// Delete mocks base method.
func (m *MockStudentPgRepo) Delete(ctx context.Context, studentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, studentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentPgRepoMockRecorder) Delete(ctx, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentPgRepo)(nil).Delete), ctx, studentID)
}

// GetByID mocks base method.
func (m *MockStudentPgRepo) GetByID(ctx context.Context, studentID int64) (serviceEntities.StudentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, studentID)
	ret0, _ := ret[0].(serviceEntities.StudentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudentPgRepoMockRecorder) GetByID(ctx, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudentPgRepo)(nil).GetByID), ctx, studentID)
}

// Update mocks base method.
func (m *MockStudentPgRepo) Update(ctx context.Context, studentId int64, studentReq serviceEntities.StudentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, studentId, studentReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStudentPgRepoMockRecorder) Update(ctx, studentId, studentReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentPgRepo)(nil).Update), ctx, studentId, studentReq)
}

// MockClassInfoPgRepo is a mock of ClassInfoPgRepo interface.
type MockClassInfoPgRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClassInfoPgRepoMockRecorder
}

// MockClassInfoPgRepoMockRecorder is the mock recorder for MockClassInfoPgRepo.
type MockClassInfoPgRepoMockRecorder struct {
	mock *MockClassInfoPgRepo
}

// NewMockClassInfoPgRepo creates a new mock instance.
func NewMockClassInfoPgRepo(ctrl *gomock.Controller) *MockClassInfoPgRepo {
	mock := &MockClassInfoPgRepo{ctrl: ctrl}
	mock.recorder = &MockClassInfoPgRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassInfoPgRepo) EXPECT() *MockClassInfoPgRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClassInfoPgRepo) Add(ctx context.Context, classInfoReq serviceEntities.ClassInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, classInfoReq)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockClassInfoPgRepoMockRecorder) Add(ctx, classInfoReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClassInfoPgRepo)(nil).Add), ctx, classInfoReq)
}

// DeleteClassByStudentID mocks base method.
func (m *MockClassInfoPgRepo) DeleteClassByStudentID(ctx context.Context, studentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassByStudentID", ctx, studentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClassByStudentID indicates an expected call of DeleteClassByStudentID.
func (mr *MockClassInfoPgRepoMockRecorder) DeleteClassByStudentID(ctx, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassByStudentID", reflect.TypeOf((*MockClassInfoPgRepo)(nil).DeleteClassByStudentID), ctx, studentID)
}

// GetByStudentID mocks base method.
func (m *MockClassInfoPgRepo) GetByStudentID(ctx context.Context, studentId int64) ([]serviceEntities.ClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", ctx, studentId)
	ret0, _ := ret[0].([]serviceEntities.ClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID.
func (mr *MockClassInfoPgRepoMockRecorder) GetByStudentID(ctx, studentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockClassInfoPgRepo)(nil).GetByStudentID), ctx, studentId)
}

// Update mocks base method.
func (m *MockClassInfoPgRepo) Update(ctx context.Context, studentId int64, classInfoReq serviceEntities.ClassInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, studentId, classInfoReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClassInfoPgRepoMockRecorder) Update(ctx, studentId, classInfoReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClassInfoPgRepo)(nil).Update), ctx, studentId, classInfoReq)
}
